<!DOCTYPE html>
<html>
	<head>
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<script src="external/jquery-3.1.0.js"></script>
		<script src="external/jquery.scrollTo/jquery.scrollTo.js"</script>
		<!-- Qunit stuff -->
		<script src="external/qunit-2.0.1.js"></script>
		<link rel="stylesheet" type="text/css" href="external/qunit-2.0.1.css">
		<style>
			.codeBox 		{ width: 800px; height: 260px; }
			.hide 			{ display: none }
			label 			{ font-weight: bold; min-width: 300px; display: block; }
		</style>

		<!-- sole.js including the qunit generator plugin -->
		<!--
		<script src="../dist/sole-latest.js"></script>
		-->
		

		<script src="../node_modules/ulib/src/ulib.pubsub.js"></script>
		<script src="../node_modules/ulib/src/ulib.plugin.js"></script>
		<script src="../node_modules/ulib/src/ulib.cookie.js"></script>

		<script src="../src/sole.js"></script>


		<script src="../filter/sole.filter.repeat.js"></script>

		<script src="../plugin/sole.plugin.qunitgenerator.js"></script>
	</head>
	<body>

		<!-- <h1>sole.js matrix debugger</h1> -->

		<style>
			html,body {margin: 0; padding: 0; background: #000;}
			.cf:before, .cf:after {content: " "; display: table; }
			.cf:after {clear: both; }
			.cf {*zoom: 1; }

			.matrix {font-family: courier; padding: 1rem; overflow: auto; background: #000; color: limegreen; font-size: 0.8em; }
			/*.matrix {width: 32em; height: 12em;}*/
			.surround {width: 100%; height: 100%;
			margin:0 auto; position:relative; }
			

			#debugMatrix {position: fixed; width: 32rem; height: 16rem; right: 1rem; top: 2rem; background: #333; opacity: 0.75; border-left: 2px solid #3f3; border-right: 2px solid #3f3; border-bottom: 2px solid #3f3;}
			#neoScreenHeading {position: fixed; width: 32rem; top: 0.5rem; right: 1rem; color: #fff; text-align: left; background: #444; border-top: 2px solid #3f3; border-left: 2px solid #3f3; border-right: 2px solid #3f3; padding: 0.25rem 1rem; font-size: 0.8rem; font-family: courier}


			.clear { clear: both; }
			.command {margin-top: 0.8em; font-family: courier; padding: 1em; overflow: auto; background: #000; color: limegreen; width: 100%; height: 1em; font-size: 0.8em; }
			.cmd { color: #fff; }
			.prompt { color: green; }
			#matrix .Morpheus {font-weight: bold; color: darkmagenta; }
			#matrix .Neo {font-weight: bold; color: green; }
		</style>

		<p>
			<div class="surround matrix">
				<div id="matrix" class=""></div>
			</div>
			<div id="neoScreenHeading" class="hide">Neo terminal</div>
			<div id="debugMatrix" class="matrix hide"></div>
			<div class="clear"></div>
			<div id="debugMatrixCommand" class="cf command hide"></div>
		</p>

		<script>
			// var betweenMessageDelay = 1000,
			// 	delayAnim = 120,
			// 	delayVariance = 300;
			var betweenMessageDelay = 500,
				delayAnim = 10,
				delayVariance = 10,
				sole;

			// Teletype plugin for jQuery
			$.fn.teletype = function(opts){
			    var $this = this,
			        defaults = {
			            delayAnim: delayAnim,
			            delayVariance: delayVariance,
			            pause: 0
			        },
			        settings = $.extend(defaults, opts),
			        count = 0,
			        charList = settings.text.split(''),
			        getDelay = function() {
						return (settings.delayAnim + ((Math.random() > 0.5)? 1: -1) * (Math.random() * settings.delayVariance));
			        },
			        typeLetter = function(){
			            $this.html($this.html() + charList[count]);
			            if(count < charList.length - 1) {
					        setTimeout(typeLetter, getDelay());
			            } else {
			            	if($.isFunction(settings.callback)) {
			            		setTimeout(function(){
			            			settings.callback();
			            		}, settings.pause);
			            	}
			            }
			            count += 1;
			        };

			    //console.log('TT', settings);

		        setTimeout(typeLetter, getDelay());
			};

			var
			startTexts = [
				{ who: "Morpheus", text: "Wake up, Neo...", pause: 400 },
				{ who: "Morpheus", text: "The Matrix has ... ", pause: 400 },
				{ who: "Morpheus", text: "Uh, this is kind of embarrassing ...", pause: 1000 },
				{ who: "Morpheus", text: "I was running an, uh, \"simulation\", and The Matrix has, um... Crashed!.." },
				{ who: "Morpheus", text: "I need you to debug it!!", pause: 2000 },
				{ who: "Neo", text: "Have you tried turning it off and on again?", pause: 2000 },
				{ who: "Neo", text: "..." },
				{ who: "Morpheus", text: ". . .-." },
				{ who: "Morpheus", text: ". . |U|" },
				{ who: "Morpheus", text: ". . | |" },
				{ who: "Morpheus", text: ". . | |" },
				{ who: "Morpheus", text: ". ._| |_" },
				{ who: "Morpheus", text: ". | | | |-." },
				{ who: "Morpheus", text: "./| . . ` |" },
				{ who: "Morpheus", text: "| | . . . |" },
				{ who: "Morpheus", text: "| . . . . |" },
				{ who: "Morpheus", text: "\\ . . . . /" },
				{ who: "Morpheus", text: ".| . . . |" },
				{ who: "Morpheus", text: ".| . . . |" },
				{ who: "Neo", text: "Hehe.", pause: 1000 },
				{ who: "Neo", text: "Did you install sole.js like I asked the other day?" },
				{ who: "Morpheus", text: "Yeah, the latest version, why?" },
				{ who: "Neo", text: "Great. This is going to be easy :)" },
				{ who: "Neo", text: "Let me bring up a terminal...", pause: 1500 }
			],
			debugTexts = [
				{ cmd: "sole.get().length" },
				{ who: "Neo", text: "Lots of entries..." },
				{ who: "Morpheus", text: "Yep, the matrix is .. large" },
				{ who: "Neo", text: "Let's try a filter..." },
				{ cmd: "sole.filter('INFO').get().length" },
				{ who: "Neo", text: "Hmm... maybe look for errors..." },
				{ cmd: "sole.filter({ type: 'error' }).get().length" },
				{ who: "Neo", text: "Ahh, there we go!" },
				{ cmd: "sole.filter({ type: 'error' })[0].args" },
				{ who: "Neo", text: "Glitch stack overflow - that means..." },
				{ who: "Morpheus", text: "...Something was repeated too many times, causing a glitch... ooh...." },
				{ who: "Morpheus", text: "Uh, this isn't really important, never mind, let's just reboot it and wipe the log." },
				//{ cmd: "sole.filter({ type: 'error' }).get().length" },
				{ who: "Neo", text: "Nah, it's just getting interesting, let's see what overflowed..." },
				{ cmd: "sole.filter('repeat', {min: 5}).length" },
				{ who: "Neo", text: "Woah, 31 repeats, wonder what it was?!" },
				{ who: "Neo", text: "Let me query for the warnings..." },
				{ cmd: "sole.filter('repeat', {min: 5}).query({type: 'warn'})[0].args" },
				{ who: "Morpheus", text: "Oh that, hehe ... How weird. But like I said, never mind, right?" },

				{ who: "Neo", text: "That is weird... I can probably query it for repeated logs..." },
				{ cmd: "sole.filter('repeat', {min: 5}).query({type: 'log'})[0].args" },
				{ who: "Neo", text: "Oh...", pause: 2000 },
				{ who: "Neo", text: "Well that's awkward.", pause: 2000 },
				{ who: "Morpheus", text: "Yeah.", pause: 2000 },
				{ who: "Neo", text: "Let's never speak of this again.", pause: 1000 },
				{ who: "Morpheus", text: "Agreed. Thanks, sole.js", pause: 1500 },
				{ who: "Morpheus", text: "Thanks a lot." }
			],
			theMatrix,
			count = 0,
			showTexts = function(texts, callback) {

				if(texts[count].who) {

					$('#matrix').html($('#matrix').html() + "<span class='who "+texts[count].who+"'>" + texts[count].who + ": </span>");

					$('#matrix').teletype({
						text: texts[count].text,
						pause:  texts[count].pause,
						callback: function() {

							$.scrollTo($('#matrix .who').last(), 500);

							setTimeout(function() {
								$('#matrix').html($('#matrix').html() + "<br/>");
					            if(count < texts.length - 1) {
						            count += 1;
					         		showTexts(texts, callback);
					            } else {
					            	if($.isFunction(callback)) {
					            		callback();
					            	}
					            }
							}, betweenMessageDelay);
						}
					});
				} else if(texts[count].cmd) {
					//var result = execute(texts[count].cmd);
					execCmd(texts[count].cmd, function() {
						setTimeout(function() {
				            if(count < texts.length - 1) {
					            count += 1;
				         		showTexts(texts, callback);
				            } else {
				            	if($.isFunction(callback)) {
				            		callback();
				            	}
				            }
						}, 100);
					});
				}

			},
			execute = function(str) {
				return (new Function("return (" + str + ")")());
			},
			execCmd = function(cmd, callback) {
				//	Show command
				$('#debugMatrixCommand').append("<br/>" + cmd);
				$('#debugMatrix').append("<br/><br/><span class='prompt'>$ </span><span class='cmd'>" +cmd+ ";</span><span class='end'></span>");

				$('#debugMatrix').scrollTo($('#debugMatrix .end').last(), 100);
				var result = execute(cmd);
				//	Show result
				$('#debugMatrix').append("<br/><span class='cmdResult'>" + result + "</span><span class='end'></span>");
				//	Scroll to the end
				$('#debugMatrix').scrollTo($('#debugMatrix .end').last(), 200);

				if($.isFunction(callback)) {
					callback();
				}
			};

			var gomatrix = function() {
				showTexts(startTexts, function() {
					var i, list = [];

					for(i = 0; i < theMatrix.length; i += 1) {
						//list.push(JSON.stringify(theMatrix[i]))
					}

					//	TODO: This should be shown when the user click the flashing "click here to continue..."

//					$('#debugMatrix').html(list.join(",<br/>") + "<span class='end'></span>").show().slideDown('slow');

					$('#debugMatrix').html("<span class='end'></span>").show().slideDown('slow');

					$('#neoScreenHeading').show();

					$('#debugMatrix')
						.scrollTo(0)
						.scrollTo($('#debugMatrix .end'), 3000, function() {
							//	Now show the commands
							count = 0;
							showTexts(debugTexts, function() {
								console.log("commands done");
							});
						});
				});
			};


			$.ajax({
				//	Script derived from: http://dc-mrg.english.ucsb.edu/WarnerTeach/E192/matrix/Matrix.script.html
				url: 'matrixlog.json',
				success: function(data){
					theMatrix = JSON.parse(data);

					//	Custom sole object with the matrix logs
					//	ie: we load in matches, so we can 
					//	interactively debug them, using sole.js
					sole = new Sole({
						matches: theMatrix
					});

					console.log('Matrix v 3.2.4 loaded');

					gomatrix();

				}
			})

		</script>


	</body>
</html>